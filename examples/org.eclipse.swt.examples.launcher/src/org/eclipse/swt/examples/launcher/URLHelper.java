package org.eclipse.swt.examples.launcher;/* * (c) Copyright IBM Corp. 2000, 2001. * All Rights Reserved */import java.io.*;import java.net.*;import org.eclipse.core.runtime.*;
/** * Grants access to a URL as if it were a file. * This is necessary as the Platform deals almost exclusively with URLs.  These URLs may or * may not refer to files on the local filesystem. *  * Instead of spreading this functionality everywhere, it has been grouped here. */
public class URLHelper {
	/**	 * Get a File representing a local path to the resources referenced by a URL.	 * Use this when you want to know the local path corresponding to aURL but do not	 * want to access it (yet).	 * <p>	 * Cannot resolve paths to non-local [not on filesystem] files or directories.	 * </p>	 * 	 * @param url the URL to convert	 * @return a File representing the URL's location on the filesystem, or null if not accessible	 * @see #urlToFile	 */	public static File urlToLocalFile(URL url) {		try {			url = Platform.resolve(url);		} catch (IOException e) { }		final String urlProtocol = url.getProtocol();		if (urlProtocol.equals("file")) {			return new File(url.getFile()).getAbsoluteFile();		}		return null;	}	/**	 * Get a File through which it is possible to access the contents of a URL.	 * Use this when you want to be able to access the contents of a URL immediately.	 * <p>	 * Will automatically cache contents from non-local files or Jars on the local filesystem.	 * Cannot resolve paths to non-local [not on filesystem] directories.	 * </p>	 * 	 * @param url the URL to convert	 * @return a File where the URL's data can be accessed, or null if not accessible	 * @see #urlToLocalFile	 */	public static File urlToFile(URL url) {		try {			url = Platform.asLocalURL(url);		} catch (IOException e) {			return urlToLocalFile(url);		}		final String urlProtocol = url.getProtocol();		if (urlProtocol.equals("file")) {			return new File(url.getFile()).getAbsoluteFile();		}		return null;	}}
